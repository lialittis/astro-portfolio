---
import ConfTable from '../components/Table/ConfTable'
import SimpleLayout from '../layouts/SimpleLayout.astro'
import NavBar from '../components/NavBar.astro'

import fs from 'fs'
import path from 'path'
import yaml from 'yaml'

interface TimelineEntry {
	deadline: string
	comment: string
}

interface ConferenceYear {
	year: number
	id: string
	link: string
	timeline: TimelineEntry[]
	timezone: string
	date: string
	place: string
}

interface Conference {
	title: string
	description: string
	sub: string
	rank: { ccf: string; core: string; thcpl: string }
	dblp: string
	confs: ConferenceYear[]
	latestconf: ConferenceYear
	deadline: string
	remainingTime: string
}

const loadConferences = (baseDir: string): Conference[] => {
	const conferenceList: Conference[] = []

	// Read all subdirectories (e.g., DS, SC), but exclude Archived
	const categories = fs
		.readdirSync(baseDir, { withFileTypes: true })
		.filter((dirent) => dirent.isDirectory() && dirent.name !== 'Archived') // Only directories, exclude Archived
		.map((dirent) => dirent.name)

	console.log(categories)

	categories.forEach((category) => {
		const categoryPath = path.join(baseDir, category)

		// Read all YAML files inside each category
		const files = fs
			.readdirSync(categoryPath)
			.filter((file) => file.endsWith('.yaml') || file.endsWith('.yml'))

		files.forEach((file) => {
			const filePath = path.join(categoryPath, file)
			const content = fs.readFileSync(filePath, 'utf8')

			try {
				const parsed = yaml.parse(content)
				// console.log("Parsed YAML:", parsed);

				// Ensure the parsed data is structured correctly
				if (parsed && typeof parsed === 'object' && parsed.confs) {
					parsed.latestconf = parsed.confs[parsed.confs.length - 1]
					// console.log(parsed.latestconf);
					switch (parsed.sub) {
						case 'DS':
							parsed.sub = 'System'
							break
						case 'SC':
							parsed.sub = 'Security'
							break;
						case 'SE':
							parsed.sub = 'Software'
							break
						default:
							break
					}
					
					// Find the first deadline that hasn't passed yet
					const now = new Date()
					let selectedDeadline = parsed.latestconf.timeline[0].deadline
					
					for (const entry of parsed.latestconf.timeline) {
						const deadlineDate = new Date(entry.deadline)
						if (deadlineDate >= now) {
							selectedDeadline = entry.deadline
							break
						}
					}
					// If all deadlines have passed, use the last one
					if (!selectedDeadline) {
						selectedDeadline = parsed.latestconf.timeline[parsed.latestconf.timeline.length - 1].deadline
					}
					
					parsed.deadline = selectedDeadline
					conferenceList.push(parsed)
				} else {
					console.warn(`Warning: Skipping ${file} due to invalid structure`)
				}
			} catch (error) {
				console.error(`Error parsing YAML file ${filePath}:`, error)
			}
		})
	})

	return conferenceList
}

const conferences = loadConferences('./conferences')
---

<SimpleLayout title='Conferences Clock' description=''>
	<NavBar />
	<div id='timeDisplay' class='pt-24 md:pt-28 w-full'>
		<ConfTable conferences={conferences} client:load />
	</div>
</SimpleLayout>
